
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/prior_know_score.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_prior_know_score.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_prior_know_score.py:


.. _ex-prior-score:

====================================================================
Using prior knowledge in order-based algorithms for causal discovery
====================================================================

We illustrate how to exploit prior knowledge and assumptions about the
causal structure that generates the data in the context of causal discovery with
order-based algorithms.

.. GENERATED FROM PYTHON SOURCE LINES 12-24

.. code-block:: default


    import numpy as np
    import networkx as nx
    from scipy import stats
    import pandas as pd
    from pywhy_graphs.viz import draw
    from dodiscover import make_context
    from dodiscover.toporder.score import SCORE
    from dowhy import gcm
    from dowhy.gcm.util.general import set_random_seed









.. GENERATED FROM PYTHON SOURCE LINES 25-29

Simulate some data
------------------
First we will simulate data, starting from an Additive Noise Model (ANM).
This will then induce a causal graph, which we can visualize.

.. GENERATED FROM PYTHON SOURCE LINES 29-91

.. code-block:: default


    # set a random seed to make example reproducible
    seed = 12345
    rng = np.random.RandomState(seed=seed)


    class MyCustomModel(gcm.PredictionModel):
        def __init__(self, coefficient):
            self.coefficient = coefficient

        def fit(self, X, Y):
            # Nothing to fit here, since we know the ground truth.
            pass

        def predict(self, X):
            return self.coefficient * X

        def clone(self):
            # We don't really need this actually.
            return MyCustomModel(self.coefficient)


    # set a random seed to make example reproducible
    set_random_seed(1234)

    # construct a causal graph that will result in
    # x -> y <- z -> w
    G = nx.DiGraph([("x", "y"), ("z", "y"), ("z", "w")])

    causal_model = gcm.ProbabilisticCausalModel(G)
    causal_model.set_causal_mechanism("x", gcm.ScipyDistribution(stats.binom, p=0.5, n=1))
    causal_model.set_causal_mechanism("z", gcm.ScipyDistribution(stats.binom, p=0.9, n=1))
    causal_model.set_causal_mechanism(
        "y",
        gcm.AdditiveNoiseModel(
            prediction_model=MyCustomModel(1),
            noise_model=gcm.ScipyDistribution(stats.binom, p=0.8, n=1),
        ),
    )
    causal_model.set_causal_mechanism(
        "w",
        gcm.AdditiveNoiseModel(
            prediction_model=MyCustomModel(1),
            noise_model=gcm.ScipyDistribution(stats.binom, p=0.5, n=1),
        ),
    )

    # Fit here would not really fit parameters, since we don't do anything in the fit method.
    # Here, we only need this to ensure that each FCM has the correct local hash (i.e., we
    # get an inconsistency error if we would modify the graph afterwards without updating
    # the FCMs). Having an empty data set is a small workaround, since all models are
    # pre-defined.
    gcm.fit(causal_model, pd.DataFrame(columns=["x", "y", "z", "w"]))

    # sample the observational data
    data = gcm.draw_samples(causal_model, num_samples=500)

    print(data.head())
    print(pd.Series({col: data[col].unique() for col in data}))
    dot_graph = draw(G)
    dot_graph.render(outfile="oracle_dag.png", view=True)




.. image-sg:: /auto_examples/images/sphx_glr_prior_know_score_001.png
   :alt: prior know score
   :srcset: /auto_examples/images/sphx_glr_prior_know_score_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fitting causal models:   0%|          | 0/4 [00:00<?, ?it/s]    Fitting causal mechanism of node x:   0%|          | 0/4 [00:00<?, ?it/s]    Fitting causal mechanism of node y:   0%|          | 0/4 [00:00<?, ?it/s]    Fitting causal mechanism of node z:   0%|          | 0/4 [00:00<?, ?it/s]    Fitting causal mechanism of node w:   0%|          | 0/4 [00:00<?, ?it/s]    Fitting causal mechanism of node w: 100%|##########| 4/4 [00:00<00:00, 1937.10it/s]
       x  ...  w
    0  0  ...  1
    1  1  ...  2
    2  0  ...  1
    3  1  ...  1
    4  1  ...  1

    [5 rows x 4 columns]
    x       [0, 1]
    z       [1, 0]
    y    [1, 2, 0]
    w    [1, 2, 0]
    dtype: object

    'oracle_dag.png'



.. GENERATED FROM PYTHON SOURCE LINES 92-97

Define the context with fixed edges
-----------------------------------
Define the context specifying the fixed directed edge (`z`, `y`) in the output graph.
This encodes prior domain information from the user, which specifies that there is
a directed connection between `z` and `y`.

.. GENERATED FROM PYTHON SOURCE LINES 97-100

.. code-block:: default

    included_edges = nx.DiGraph([("z", "y")])
    context = make_context().variables(data=data).edges(include=included_edges).build()








.. GENERATED FROM PYTHON SOURCE LINES 101-105

Run structure learning algorithm with fixed edges
-------------------------------------------------
Now we run inference with the SCORE algorithm. The output of the inference
must be a graph including (`z`, `y`) in the set of edges.

.. GENERATED FROM PYTHON SOURCE LINES 105-113

.. code-block:: default

    score = SCORE()  # or DAS() or NoGAM() or CAM()
    score.learn_graph(data, context)

    # Verify that the output includes (`z`, `y`) in the set of edges.
    graph = score.graph_
    dot_graph = draw(graph, name="DAG with (z, y) directed edge")
    dot_graph.render(outfile="score_prior_include.png", view=True)




.. image-sg:: /auto_examples/images/sphx_glr_prior_know_score_002.png
   :alt: prior know score
   :srcset: /auto_examples/images/sphx_glr_prior_know_score_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    'score_prior_include.png'



.. GENERATED FROM PYTHON SOURCE LINES 114-119

Define the context with excluded edges
--------------------------------------
The context can also be used to encode prior information about directed edges that
must be excluded from the the output graph. In this example, we define the context
that excludes the edge (`z`, `w`) from the output DAG.

.. GENERATED FROM PYTHON SOURCE LINES 119-134

.. code-block:: default

    excluded_edges = nx.DiGraph([("z", "w")])
    context = make_context().variables(data=data).edges(exclude=excluded_edges).build()

    # Run structure learning algorithm with excluded edges
    # ----------------------------------------------------
    # Now we run inference with the SCORE algorithm. The edge (`z`, `w`)
    # must not appear in the output graph.
    score = SCORE()  # or DAS() or NoGAM() or CAM()
    score.learn_graph(data, context)

    # Verify that the output does not include (`z`, `w`) in the set of edges.
    graph = score.graph_
    dot_graph = draw(graph, name="DAG without (z, w) directed edge")
    dot_graph.render(outfile="score_prior_exclude.png", view=True)




.. image-sg:: /auto_examples/images/sphx_glr_prior_know_score_003.png
   :alt: prior know score
   :srcset: /auto_examples/images/sphx_glr_prior_know_score_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    'score_prior_exclude.png'



.. GENERATED FROM PYTHON SOURCE LINES 135-142

Summary
-------
In this tutorial we show how to encode prior knowledge about the solution with
the context object, in the setting of causal discovery with order-based algorithms.
This example can be generalized to the case of `NoGAM`, `DAS`, and `CAM` methods.
For a detailed example on order-based discovery approaches, see this
:ref:`tutorial <ex-score-algorithm>`.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.873 seconds)


.. _sphx_glr_download_auto_examples_prior_know_score.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: prior_know_score.py <prior_know_score.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: prior_know_score.ipynb <prior_know_score.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
